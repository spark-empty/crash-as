/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 */

#include "sipAPIAS.h"

#line 12 "pyas.sip"
#include "pycan.h"
#line 12 "E:/as/release/aslua/out/sipAScan.cpp"



extern "C" {static PyObject *meth_can_open(PyObject *, PyObject *);}
static PyObject *meth_can_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;
        const char* a1;
        unsigned long a2;
        unsigned long a3;
         ::can *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bmsmm", &sipSelf, sipType_can, &sipCpp, &a0, &a1, &a2, &a3))
        {
            int sipRes;

            sipRes = sipCpp->open(a0,a1,a2,a3);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_can, sipName_open, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_can_write(PyObject *, PyObject *);}
static PyObject *meth_can_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;
        unsigned long a1;
        unsigned long a2;
        unsigned char* a3;
         ::can *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bmmms", &sipSelf, sipType_can, &sipCpp, &a0, &a1, &a2, &a3))
        {
            int sipRes;

            sipRes = sipCpp->write(a0,a1,a2,a3);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_can, sipName_write, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_can_read(PyObject *, PyObject *);}
static PyObject *meth_can_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;
        unsigned long a1;
        unsigned long a2;
        unsigned long a3;
        unsigned char* a4;
         ::can *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bmm", &sipSelf, sipType_can, &sipCpp, &a0, &a1))
        {
            int sipRes = 0;

#line 21 "pyas.sip"
            PyObject * pyObj;
            sipRes = sipCpp->read(a0,a1,&a2,&a3,&a4);
            pyObj = sipBuildResult(0,"(immg)",sipRes,a2,a3,a4,(SIP_SSIZE_T)a3);
            if(NULL != a4) {
                free(a4);
            }
            return pyObj;
#line 99 "E:/as/release/aslua/out/sipAScan.cpp"

            return sipBuildResult(0,"(imms)",sipRes,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_can, sipName_read, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_can_close(PyObject *, PyObject *);}
static PyObject *meth_can_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;
         ::can *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bm", &sipSelf, sipType_can, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->close(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_can, sipName_close, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_can_reset(PyObject *, PyObject *);}
static PyObject *meth_can_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        unsigned long a0;
         ::can *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bm", &sipSelf, sipType_can, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->reset(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_can, sipName_reset, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_can(void *, int);}
static void release_can(void *sipCppV, int)
{
    delete reinterpret_cast< ::can *>(sipCppV);
}


extern "C" {static void assign_can(void *, SIP_SSIZE_T, void *);}
static void assign_can(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::can *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::can *>(sipSrc);
}


extern "C" {static void *array_can(SIP_SSIZE_T);}
static void *array_can(SIP_SSIZE_T sipNrElem)
{
    return new  ::can[sipNrElem];
}


extern "C" {static void *copy_can(const void *, SIP_SSIZE_T);}
static void *copy_can(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::can(reinterpret_cast<const  ::can *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_can(sipSimpleWrapper *);}
static void dealloc_can(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_can(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_can(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_can(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::can *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::can();

            return sipCpp;
        }
    }

    {
        const  ::can* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_can, &a0))
        {
            sipCpp = new  ::can(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_can[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_can_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_can_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_can_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_can_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_can_write, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_AS_can = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_can,
        {0},
        0
    },
    {
        sipNameNr_can,
        {0, 0, 1},
        5, methods_can,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_can,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_can,
    assign_can,
    array_can,
    copy_can,
    release_can,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
