/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.8
 */

#include "sipAPIAS.h"

#line 36 "pyas.sip"
#include "pyasdev.h"
#line 12 "E:/as/release/aslua/out/sipASasdev.cpp"



extern "C" {static PyObject *meth_asdev_open(PyObject *, PyObject *);}
static PyObject *meth_asdev_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const char* a1;
         ::asdev *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bss", &sipSelf, sipType_asdev, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->open(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_asdev, sipName_open, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_asdev_write(PyObject *, PyObject *);}
static PyObject *meth_asdev_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        unsigned char* a1;
        unsigned long a2;
         ::asdev *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bism", &sipSelf, sipType_asdev, &sipCpp, &a0, &a1, &a2))
        {
            int sipRes;

            sipRes = sipCpp->write(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_asdev, sipName_write, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_asdev_read(PyObject *, PyObject *);}
static PyObject *meth_asdev_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        unsigned char* a1;
         ::asdev *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_asdev, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 44 "pyas.sip"
            PyObject * pyObj;
            sipRes = sipCpp->read(a0,&a1);
            pyObj = sipBuildResult(0,"(ig)",sipRes,a1,(SIP_SSIZE_T)sipRes);
            if(NULL != a1) {
                free(a1);
            }
            return pyObj;
#line 93 "E:/as/release/aslua/out/sipASasdev.cpp"

            return sipBuildResult(0,"(is)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_asdev, sipName_read, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_asdev_ioctl(PyObject *, PyObject *);}
static PyObject *meth_asdev_ioctl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        unsigned char* a2;
        unsigned long a3;
        unsigned char* a4;
         ::asdev *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biism", &sipSelf, sipType_asdev, &sipCpp, &a0, &a1, &a2, &a3))
        {
            int sipRes = 0;

#line 55 "pyas.sip"
            PyObject * pyObj;
            sipRes = sipCpp->ioctl(a0,a1,a2,a3,&a4);
            pyObj = sipBuildResult(0,"(is)",sipRes,a4);
            if(NULL != a4) {
                free(a4);
            }
            return pyObj;
#line 131 "E:/as/release/aslua/out/sipASasdev.cpp"

            return sipBuildResult(0,"(is)",sipRes,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_asdev, sipName_ioctl, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_asdev_close(PyObject *, PyObject *);}
static PyObject *meth_asdev_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::asdev *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_asdev, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->close(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_asdev, sipName_close, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_asdev(void *, int);}
static void release_asdev(void *sipCppV, int)
{
    delete reinterpret_cast< ::asdev *>(sipCppV);
}


extern "C" {static void assign_asdev(void *, SIP_SSIZE_T, void *);}
static void assign_asdev(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::asdev *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::asdev *>(sipSrc);
}


extern "C" {static void *array_asdev(SIP_SSIZE_T);}
static void *array_asdev(SIP_SSIZE_T sipNrElem)
{
    return new  ::asdev[sipNrElem];
}


extern "C" {static void *copy_asdev(const void *, SIP_SSIZE_T);}
static void *copy_asdev(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::asdev(reinterpret_cast<const  ::asdev *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_asdev(sipSimpleWrapper *);}
static void dealloc_asdev(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_asdev(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_asdev(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_asdev(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::asdev *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::asdev();

            return sipCpp;
        }
    }

    {
        const  ::asdev* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_asdev, &a0))
        {
            sipCpp = new  ::asdev(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_asdev[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_asdev_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ioctl), meth_asdev_ioctl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_asdev_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_asdev_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_asdev_write, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_AS_asdev = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_asdev,
        {0},
        0
    },
    {
        sipNameNr_asdev,
        {0, 0, 1},
        5, methods_asdev,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_asdev,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_asdev,
    assign_asdev,
    array_asdev,
    copy_asdev,
    release_asdev,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
