/*
* Configuration of module: NvM
*
* Created by:   parai
* Copyright:    (C)parai@foxmail.com  
*
* Configured for (MCU):    posix
*
* Module vendor:           ArcCore
* Generator version:       01.00
*
* Generated by easySAR Studio (https://github.com/parai/as)
*/

#ifndef NVM_CFG_H_
#define NVM_CFG_H_

#include "NvM_Types.h"
#include "NvM_ConfigTypes.h"

#define NVM_DEV_ERROR_DETECT            STD_ON
#define NVM_VERSION_INFO_API            STD_OFF
#define NVM_SET_RAM_BLOCK_STATUS_API    STD_OFF

#define NVM_API_CONFIG_CLASS            NVM_API_CONFIG_CLASS_2     // Class 1-3
#define NVM_COMPILED_CONFIG_ID          0                          // 0..65535
#define NVM_CRC_NUM_OF_BYTES            0                          // 1..65535
#define NVM_DATASET_SELECTION_BITS      0                          // 0..8
#define NVM_DRV_MODE_SWITCH             STD_OFF                    // OFF = SLOW, ON = FAST
#define NVM_DYNAMIC_CONFIGURATION       STD_OFF                    // OFF..ON
#define NVM_JOB_PRIORIZATION            STD_OFF                    // OFF..ON
#define NVM_MAX_NUMBER_OF_WRITE_RETRIES 2                          // 0..7
#define NVM_POLLING_MODE                STD_OFF                    // OFF..ON
#define NVM_SIZE_IMMEDIATE_JOB_QUEUE    8                          // 1..255
#define NVM_SIZE_STANDARD_JOB_QUEUE     8                          // 1..255

#define NVM_FEE_BLOCK_SIZE_Time             (sizeof(NvM_Block_Time_DataGroupType)+2)
#define NVM_FEE_BLOCK_SIZE_Finger_Print     (sizeof(NvM_Block_FingerPrint_DataGroupType)+2)
#define NVM_FEE_BLOCK_SIZE_Config           (sizeof(NvM_Block_Config_DataGroupType)+2)
#define NVM_EA_BLOCK_SIZE_EaTest1           (sizeof(NvM_Block_EaTest1_DataGroupType)+2)
#define NVM_EA_BLOCK_SIZE_EaTest2           (sizeof(NvM_Block_EaTest2_DataGroupType)+2)
#define NVM_FEE_BLOCK_SIZE_DemHealing       (sizeof(NvM_Block_DemHealing_DataGroupType)+2)
#define NVM_FEE_BLOCK_SIZE_Dem_DemFreezeFrame (sizeof(NvM_Block_DemFreezeFrame_DataGroupType)+2)
#define NVM_EA_MAX_BLOCK_LENGTH  16
#define NVM_MAX_BLOCK_LENGTH    260

#define NVM_BLOCK_ID_Time 1
#define NVM_BLOCK_ID_FingerPrint 2
#define NVM_BLOCK_ID_Config 3
#define NVM_BLOCK_ID_EaTest1 4
#define NVM_BLOCK_ID_EaTest2 5
#define NVM_BLOCK_ID_DemHealing 6
#define NVM_BLOCK_ID_DemFreezeFrame_0 7
#define NVM_BLOCK_ID_DemFreezeFrame_1 8
#define NVM_BLOCK_ID_DemFreezeFrame_2 9
#define NVM_BLOCK_ID_DemFreezeFrame_3 10
#define NVM_BLOCK_ID_DemFreezeFrame_4 11
#define NVM_NUM_OF_NVRAM_BLOCKS 11


typedef struct{
	uint16 _Year;
	uint8 _Month;
	uint8 _Day;
	uint8 _Hour;
	uint8 _Minute;
	uint8 _Second;
}NvM_Block_Time_DataGroupType;


typedef struct{
	uint8 _bytes[32];
}NvM_Block_FingerPrint_DataGroupType;


typedef struct{
	uint8 _bytes[260];
}NvM_Block_Config_DataGroupType;


typedef struct{
	uint32 _Data0;
	uint32 _Data1;
	uint32 _Data2;
	uint32 _Data3;
}NvM_Block_EaTest1_DataGroupType;


typedef struct{
	uint32 _Data1;
	uint32 _Data2;
	uint32 _Data3;
	uint32 _Data4;
}NvM_Block_EaTest2_DataGroupType;


typedef struct{
	struct 
	{ 
		uint16 eventId;
		uint8 agingCounter;
		uint16 checksum;
	} HealingRec[8];
}NvM_Block_DemHealing_DataGroupType;


typedef struct{
	struct 
	{ 
		uint16 eventId;
		uint8 kind;
		uint16 occurrence;
		uint16 dataSize;
		uint8 recordNumber;
		uint32 timeStamp;
		uint8 data[10];
		uint16 checksum;
	} FreezeFrameRec;
}NvM_Block_DemFreezeFrame_DataGroupType;


#define Rte_NvMReadBuffer(GroupName)    ((uint8*)&NvM_Block_##GroupName##_DataGroup_RAM)    
#define Rte_NvMRead(GroupName,DataName) (NvM_Block_##GroupName##_DataGroup_RAM._##DataName)
#define Rte_NvMReadArrayBuffer(GroupName,DataName) ((uint8*)NvM_Block_##GroupName##_DataGroup_RAM._##DataName)
#define Rte_NvMReadArray(GroupName,DataName,Index) (NvM_Block_##GroupName##_DataGroup_RAM._##DataName[Index])

#define Rte_NvMReadBufferConst(GroupName)    ((uint8*)&NvM_Block_##GroupName##_DataGroup_ROM) 
#define Rte_NvMReadConst(GroupName,DataName) (NvM_Block_##GroupName##_DataGroup_ROM._##DataName)
#define Rte_NvMReadArrayBufferConst(GroupName,DataName) ((uint8*)NvM_Block_##GroupName##_DataGroup_ROM._##DataName)
#define Rte_NvMReadArrayConst(GroupName,DataName,Index) (NvM_Block_##GroupName##_DataGroup_ROM._##DataName[Index])

#define Rte_NvMWrite(GroupName,DataName,Value) (NvM_Block_##GroupName##_DataGroup_RAM._##DataName = Value)
#define Rte_NvMWriteArray(GroupName,DataName,Index,Value) (NvM_Block_##GroupName##_DataGroup_RAM._##DataName[Index] = Value)

#define Rte_NvmWriteBlock(GroupName) NvM_WriteBlock(NVM_BLOCK_ID_##GroupName,(uint8*)&NvM_Block_##GroupName##_DataGroup_RAM)
#define Rte_NvmReadBlock(GroupName)  NvM_ReadBlock(NVM_BLOCK_ID_##GroupName,(uint8*)&NvM_Block_##GroupName##_DataGroup_RAM)      


extern NvM_Block_Time_DataGroupType NvM_Block_Time_DataGroup_RAM;
extern const NvM_Block_Time_DataGroupType NvM_Block_Time_DataGroup_ROM;

extern NvM_Block_FingerPrint_DataGroupType NvM_Block_FingerPrint_DataGroup_RAM;
extern const NvM_Block_FingerPrint_DataGroupType NvM_Block_FingerPrint_DataGroup_ROM;

extern NvM_Block_Config_DataGroupType NvM_Block_Config_DataGroup_RAM;
extern const NvM_Block_Config_DataGroupType NvM_Block_Config_DataGroup_ROM;

extern NvM_Block_EaTest1_DataGroupType NvM_Block_EaTest1_DataGroup_RAM;
extern const NvM_Block_EaTest1_DataGroupType NvM_Block_EaTest1_DataGroup_ROM;

extern NvM_Block_EaTest2_DataGroupType NvM_Block_EaTest2_DataGroup_RAM;
extern const NvM_Block_EaTest2_DataGroupType NvM_Block_EaTest2_DataGroup_ROM;

extern NvM_Block_DemHealing_DataGroupType NvM_Block_DemHealing_DataGroup_RAM;
extern const NvM_Block_DemHealing_DataGroupType NvM_Block_DemHealing_DataGroup_ROM;

extern NvM_Block_DemFreezeFrame_DataGroupType NvM_Block_DemFreezeFrame_DataGroup_RAM[5];
extern const NvM_Block_DemFreezeFrame_DataGroupType NvM_Block_DemFreezeFrame_DataGroup_ROM[5];


#endif /*NVM_CFG_H_*/

