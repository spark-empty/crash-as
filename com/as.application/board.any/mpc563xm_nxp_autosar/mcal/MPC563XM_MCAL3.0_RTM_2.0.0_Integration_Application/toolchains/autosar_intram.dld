/*==================================================================================================

   @file        autosar_intram.ld
   @version     2.0.0

   @brief       DIAB Linker Command File for Internal RAM for XPC564XA.
   @details     DIAB Linker Command File for Internal RAM for XPC564XA.

   Project      : AUTOSAR 3.0 MCAL
   Platform     : PA
   Peripheral   : 
   Dependencies : Base Det Dem Port Dio Mcu SchM Wdg WdgIf CanIf LinIf EcuM

   Autosar Version       : 1.9.0
   Autosar Revision      : ASR_REL_1_9_REV_0003
   Autosar Conf. Variant :
   Software Version      : 2.0.0
   Build Version         : MPC563xMxM_MCAL_2_0_0_RTM_ASR_REL_1_9_REV_0003_20110214

   (c) Copyright 2006-2011 Freescale Semiconductor Inc. & STMicroelectronics
   All Rights Reserved.

===================================================================================================

Note: This linker command file to be used with XPC564XA devices only.
==================================================================================================*/


MEMORY {

    /* XPC563XM - Flash 1.5 MB - 0x00 - 0x17FFFF */

    flash_rsvd1       : org = 0x00000000, len = 8
    flash_memory      : org = 0x00000008, len = 0xEFFF8
    flash_vec         : org = 0x000F0000, len = 0x90000
    flash_rsvd2       : org = 0x00180000, len = 0



    /* XPC563XM - SRAM 94 KB : 0x40000000 - 0x400177FF */
    ram_rsvd1    :     org = 0x20000000, len = 0
    int_sram_vec :     org = 0x40000000, len = 0x5000
    int_sram     :     org = 0x40005000, len = 0x11360
    res_ram      :     org = 0x40016360, len = 0x60      /* a reserved ram section needed by FLS driver */
    iram_stack   :     org = 0x400163C0, len = 0x01000
    int_timers   :     org = 0x400173C0, len = 0x0340
    int_results  :     org = 0x40017700, len = 0x0100
}

/*
 Program layout for starting in ROM, copying data to RAM,
 and continuing to execute out of ROM.
*/

SECTIONS
{
/* Place BINDED entries first, then place other entries    */
/* in order of desired relative placement.                 */


/*----------------*/
/* SECTIONS       */
/*----------------*/
      GROUP  : {
        .isrvectbl(TEXT) : {}
        .isrvectbl_core(TEXT) : {}
    }>int_sram_vec

      GROUP : {
        .rcw : {}
        .text (TEXT) : {}
        .text_vle(TEXT): {}
        .rodata(TEXT) :{}
        .sdata2 (DATA) : {}
        .fixaddr : {}
        .fixtype : {}
        _load_sdata0  = . ;
        _load_sdabase = _load_sdata0  + SIZEOF(.sdata0)  ;
        _load_sdata   = _load_sdabase + SIZEOF(.sdabase) ;
        _load_data    = _load_sdata   + SIZEOF(.sdata)   ;
    }>int_sram

      GROUP :  {
        .ramcode(TEXT) ALIGN(4) : {}
        .sdata0(DATA) LOAD(_load_sdata0) : {}
        .sdabase ALIGN(8) LOAD(_load_sdabase)   : {}
        .sdata (DATA) LOAD(_load_sdata) : {}
        .data (DATA) LOAD(_load_data) : {}
    }>int_sram

      GROUP : {
        .sbss0(BSS) : {}
        .sbss (BSS) : {}
           .bss  (BSS) : {}
    }>int_sram


    /* The second section will allocate space for the initialized data
         * (.data/.sdata) and the unititialized data (.bss/.sbss) in the "ram" section.
         */

    GROUP : {
        .pbadc_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbcan_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbdio_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbfls_cfg(DATA) : {}
	}> int_sram

	GROUP : {
		.pbfr_cfg(DATA) : {}
	}> int_sram

    GROUP : {
        .pbgpt_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbicu_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pblin_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbmcu_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbport_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbpwm_cfg(DATA) : {}
    }> int_sram

    GROUP : {
        .pbspi_cfg(DATA) : {}
	}> int_sram

    GROUP : {
        .pbwdg_cfg(DATA) : {}
	}> int_sram

    __IV_ADDR       = ADDR(int_sram_vec);

    PB_ADC_CFG1     = ADDR(.pbadc_cfg);
    PB_CAN_CFG1     = ADDR(.pbcan_cfg);
    PB_DIO_CFG1     = ADDR(.pbdio_cfg);
    PB_FLS_CFG1     = ADDR(.pbfls_cfg);
	PB_FR_CFG1      = ADDR(.pbfr_cfg);
    PB_GPT_CFG1     = ADDR(.pbgpt_cfg);
    PB_ICU_CFG1     = ADDR(.pbicu_cfg);
    PB_LIN_CFG1     = ADDR(.pblin_cfg);
    PB_MCU_CFG1     = ADDR(.pbmcu_cfg);
    PB_PORT_CFG1    = ADDR(.pbport_cfg);
    PB_PWM_CFG1     = ADDR(.pbpwm_cfg);
    PB_SPI_CFG1     = ADDR(.pbspi_cfg);
    PB_WDG_CFG1     = ADDR(.pbwdg_cfg);

    INT_SRAM_START  = ADDR(int_sram);
    INT_SRAM_SIZE   = (SIZEOF(int_sram)+SIZEOF(iram_stack)+SIZEOF(int_timers)+SIZEOF(int_results))/4;
    SBSS_SRAM_START = ADDR(.sbss);
    SBSS_SRAM_SIZE  = (SIZEOF(.sbss)+3)/4;
    BSS_SRAM_START  = ADDR(.bss);
    BSS_SRAM_SIZE   = (SIZEOF(.bss)+3)/4;
    SDATA_RW_START  = _SDA_BASE_;
    SDATA_RO_START  = _SDA2_BASE_;

    /* generate symbols used in start-up code to init .ramcode section */
    RC_RAMCODE_SRC =  0;
    RC_RAMCODE_DEST = 0;
    RC_RAMCODE_SIZE = 0;


    RC_PPC_SDATA2_SRC =  _load_sdata0;
    RC_PPC_SDATA2_DEST = ADDR(.sdata0);
    RC_PPC_SDATA2_SIZE = (SIZEOF(.sdata0)+3) / 4;
    RC_SDATA_SRC       = _load_sdata;
    RC_SDATA_DEST      = ADDR(.sdata);
    RC_SDATA_SIZE      = (SIZEOF(.sdata)+3) / 4;
    RC_DATA_SRC        = _load_data;
    RC_DATA_DEST       = ADDR(.data);
    RC_DATA_SIZE       = (SIZEOF(.data)+3) / 4;

    __SP_INIT      = ADDR(iram_stack) + SIZEOF(iram_stack);
    __SP_END       = ADDR(iram_stack);
    __STACK_SIZE   = SIZEOF(iram_stack);


    _ERASE_FUNC_ADDRESS_            = ADDR(res_ram);
    _WRITE_FUNC_ADDRESS_            = ADDR(res_ram);

}
