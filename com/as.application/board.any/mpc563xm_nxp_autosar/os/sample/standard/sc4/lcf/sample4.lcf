/**************************************************************************************
* 
*   Freescale(TM) and the Freescale logo are trademarks of Freescale Semiconductor, Inc. 
*   All other product or service names are the property of their respective owners. 
*   (C) Freescale Semiconductor, Inc. 2007-2010
* 
*   You can use this example for any purpose on any computer system with the
*   following restrictions:
*
*   1. This example is provided "as is", without warranty.
*
*   2. You don't remove this copyright notice from this example or any direct derivation 
*      thereof.
*
*  Description:  CodeWarrior linker command file for AUTOSAR OS/MPC56xxAMv3 sample 
*                application.
*
**************************************************************************************/
NO_VLE_MIN_ALIGN2

MEMORY
{
/* The memory areas for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */
/* The end of the memory areas for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */    
}

SECTIONS
{
    GROUP : {
        .vects (VLECODE) ALIGN(0x1000): {
          *(.vects)
          *(.vects_vle)
        }
    } > OsInternalRAM

    GROUP : {
        /* Code and constant area (all code and constant sections shall be placed between .osbegincode and .osendcode sections) */
        .osbegincode ALIGN(0x20) : {}

        .init : {}
        .init_vle (VLECODE) : {
            *(.init)
            *(.init_vle)        
        }

        /*  OS code and constant data */
        /*.ostext_vle (VLECODE) : {*/       
        .ostext (VLECODE) : {
            *(.ostext)
            *(.ostext_vle)
         }
        .oshook (VLECODE) : {
            *(.oshook)
            *(.oshook_vle)
         }
        .osrodata : {}
        .ossrodata : {}

        /* Code and constant data */
        .text : {}
        .text_vle (VLECODE) : {
            . = ALIGN(0x100);
            *(.text)
            *(.text_vle)
        }
        .appcode_vle (VLECODE) : {
            *(.appcode)
            *(.appcode_vle)
        }
        .rodata : {}

        /* Small constants */
        .sdata2  : {}
        .sbss2  : {}  
        .sapp_c32  : {}      /* small constant sections for all trusted applications */
        .sapp_c16  : {}
        .sapp_cU   : {}
        .sapp_c8   : {}

        /* Constructor and destructor function ptrs */
        .ctors : {}
        .dtors : {}

        extab : {}
        extabindex : {}        

        .osendcode ALIGN(0x20) : {}
    } > OsInternalRAM


    /* Data/BSS group */
    GROUP : {        
        /* OS stack */
        .osstack  ALIGN(0x20) : {}

        /* data sections */
        .data  : {}       
        .osdata : {}
        
        /* Small data sections */
        .sapp_v32_data : {}   /* small data sections for all trusted applications */
        .sapp_v16_data : {}
        .sapp_vU_data  : {}
        .sapp_v8_data  : {}
        .ossdata : {}
        .sdata : {}

        /* Small bss sections */
        .sbss : {}
        .ossbss : {}
        .sapp_v32_bss : {}    /* small bss sections for all trusted applications */
        .sapp_v16_bss : {}
        .sapp_vU_bss  : {}
        .sapp_v8_bss  : {}

        /* Begin of the RAM area for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */
        /* End of the RAM area for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */

        /* Begin of the RAM area #1 for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */
        /* End of the RAM area #1 for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */

        /* Begin of the RAM area #2 for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */
        /* End of the RAM area #2 for applications. Do not edit or delete this comment: it is used by the SysGen for CodeWarrior */

        /* bss sections */
        .osbss : {}
        .bss   : {}
        
    } > OsInternalRAM
}

_stack_addr = ADDR(OsInternalRAM) + SIZEOF(OsInternalRAM);
_stack_end  = ADDR(.bss)+SIZEOF(.bss);


/* These are not currently being used: */
/* _heap_addr  = ADDR(.bss)+SIZEOF(.bss); 
   _heap_end   = ADDR(OsInternalRAM) + SIZEOF(OsInternalRAM); */
