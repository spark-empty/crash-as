/**************************************************************************************
* 
*   Freescale(TM) and the Freescale logo are trademarks of Freescale Semiconductor, Inc.
*   All other product or service names are the property of their respective owners.
*   (C) Freescale Semiconductor, Inc. 2007-2009
* 
*   You can use this example for any purpose on any computer system with the
*   following restrictions:
*
*   1. This example is provided "as is", without warranty.
*
*   2. You don't remove this copyright notice from this example or any direct derivation 
*      thereof.
*
*  Description:  DIAB linker command file for AUTOSAR OS/MPC56xxAM benchmark 
*                application.
*
**************************************************************************************/
MEMORY
{
    OsInternalRAM :  org = 0x40000000, len = 0xC000
}

SECTIONS
{
    GROUP : {    
        /* Interrupt vector table */
        .vects (TEXT) ALIGN(0x1000) : {
          *(.vects)
          *(.vects_vle)
        }       
           
        /* Code and constant area (all code and constant sections shall be placed between .osbegincode and .osendcode sections) */
        .osbegincode ALIGN(0x20) : {}           
        .text : { *(.text_vle) *(.rdata) *(.rodata) *(.init) *(.fini) }
        .ostext (TEXT) : {
            *(.ostext)
            *(.ostext_vle)
         }        
        .oshook (TEXT) : {
            *(.oshook)
            *(.oshook_vle)
         }        
        .appcode (TEXT) : {
            *(.appcode)
            *(.appcode_vle)
         } 
        .rodata : {} 
        .osrodata : {}
        .sdata2 : {}       
        .ossrodata : {}
        .ctors : {}     
        .dtors : {}
        .osendcode : {}
   
        /* OS bss/sbss */
        .osstack ALIGN(0x20) : {}
        __DATA_ROM = .;
        __DATA_RAM = .;
        .data : {}
        .osdata : {}
        .app0_vU : {}        
        
        /* Short data sections */
        .sdata : {} /* default sdata threshold is 0, then sdata/sbss section are empty always. */
        .sapp_vU_data : {}
        
        __DATA_END = .;
               
        __BSS_START = .;       
        /* Short bss sections */
        .sbss : {}
        .ossbss : {}
        .bss : {}
        .osbss : {}
        .sapp_vU_bss : {}
        __BSS_END = .;
      
    } > OsInternalRAM
}

__SP_INIT    = ADDR(OsInternalRAM) + SIZEOF(OsInternalRAM);
__SP_END     = __SP_INIT - 0x400;

/* Some targets use an extra underscore in front of identifiers */
___SP_INIT	 = __SP_INIT;
___SP_END	 = __SP_END;
/*___DATA_ROM	 = __DATA_ROM;*/
___DATA_RAM	 = __DATA_RAM;
___DATA_END	 = __DATA_END;
___BSS_START = __BSS_START;
___BSS_END	 = __BSS_END;

_f_ostext      = ADDR(.ostext);
_e_ostext      = ADDR(.ostext)+SIZEOF(.ostext);
_f_vects       = ADDR(.vects);
_e_vects       = ADDR(.vects)+SIZEOF(.vects);
_f_osstack     = ADDR(.osstack);
_e_osstack     = ADDR(.osstack)+SIZEOF(.osstack);
_f_osbegincode = ADDR(.osbegincode);
_e_osendcode   = ADDR(.osendcode);