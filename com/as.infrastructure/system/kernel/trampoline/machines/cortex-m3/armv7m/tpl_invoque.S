/**
 * @file tpl_invoque.S
 *
 * @section descr File description
 *
 * System call user level invoque API.
 *
 * @warning this file is generated by gen_invoque.sh based on the 
 * tpl_os_service_ids.h header file.
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005+
 * Copyright ESEO for function and data structures documentation and ARM port
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $$Date$$
 * $$Rev$$
 * $$Author$$
 * $$URL$$
 */
#include "tpl_os_application_def.h"
#include "tpl_service_ids.h"

#if WITH_SYSTEM_CALL == NO
#error "This file should not be part of your project since WITH_SYSTEM_CALL is not defined"
#endif


#if WITH_MEMMAP == NO

#endif /* WITH_MEMMAP == NO */

#define API_START_SEC_CODE
#include "tpl_as_memmap.h"

	.syntax unified
	.thumb
.equ ISR_NUMBER_MASK, 0x000001FF


 /*============================================================================
  * Service GetActiveApplicationMode
  */
.global GetActiveApplicationMode
.type   GetActiveApplicationMode, %function
GetActiveApplicationMode:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetActiveApplicationMode_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetActiveApplicationMode
    svc  #OSServiceId_GetActiveApplicationMode
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetActiveApplicationMode_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_active_application_mode_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service StartOS
  */
.global tpl_start_os
.type   tpl_start_os, %function
tpl_start_os:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  StartOS_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_StartOS
    svc  #OSServiceId_StartOS
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
StartOS_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_start_os_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service ShutdownOS
  */
.global ShutdownOS
.type   ShutdownOS, %function
ShutdownOS:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ShutdownOS_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ShutdownOS
    svc  #OSServiceId_ShutdownOS
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ShutdownOS_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_shutdown_os_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service EnableAllInterrupts
  */
.global EnableAllInterrupts
.type   EnableAllInterrupts, %function
EnableAllInterrupts:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  EnableAllInterrupts_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_EnableAllInterrupts
    svc  #OSServiceId_EnableAllInterrupts
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
EnableAllInterrupts_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_enable_all_interrupts_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service DisableAllInterrupts
  */
.global DisableAllInterrupts
.type   DisableAllInterrupts, %function
DisableAllInterrupts:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  DisableAllInterrupts_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_DisableAllInterrupts
    svc  #OSServiceId_DisableAllInterrupts
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
DisableAllInterrupts_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_disable_all_interrupts_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service ResumeAllInterrupts
  */
.global ResumeAllInterrupts
.type   ResumeAllInterrupts, %function
ResumeAllInterrupts:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ResumeAllInterrupts_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ResumeAllInterrupts
    svc  #OSServiceId_ResumeAllInterrupts
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ResumeAllInterrupts_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_resume_all_interrupts_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service SuspendAllInterrupts
  */
.global SuspendAllInterrupts
.type   SuspendAllInterrupts, %function
SuspendAllInterrupts:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  SuspendAllInterrupts_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_SuspendAllInterrupts
    svc  #OSServiceId_SuspendAllInterrupts
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
SuspendAllInterrupts_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_suspend_all_interrupts_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service ResumeOSInterrupts
  */
.global ResumeOSInterrupts
.type   ResumeOSInterrupts, %function
ResumeOSInterrupts:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ResumeOSInterrupts_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ResumeOSInterrupts
    svc  #OSServiceId_ResumeOSInterrupts
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ResumeOSInterrupts_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_resume_os_interrupts_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service SuspendOSInterrupts
  */
.global SuspendOSInterrupts
.type   SuspendOSInterrupts, %function
SuspendOSInterrupts:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  SuspendOSInterrupts_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_SuspendOSInterrupts
    svc  #OSServiceId_SuspendOSInterrupts
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
SuspendOSInterrupts_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_suspend_os_interrupts_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service CallTerminateISR2
  */
.global CallTerminateISR2
.type   CallTerminateISR2, %function
CallTerminateISR2:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  CallTerminateISR2_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_CallTerminateISR2
    svc  #OSServiceId_CallTerminateISR2
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
CallTerminateISR2_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_call_terminate_isr2_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service ActivateTask
  */
.global ActivateTask
.type   ActivateTask, %function
ActivateTask:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ActivateTask_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ActivateTask
    svc  #OSServiceId_ActivateTask
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ActivateTask_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_activate_task_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service TerminateTask
  */
.global TerminateTask
.type   TerminateTask, %function
TerminateTask:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  TerminateTask_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_TerminateTask
    svc  #OSServiceId_TerminateTask
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
TerminateTask_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_terminate_task_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service ChainTask
  */
.global ChainTask
.type   ChainTask, %function
ChainTask:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ChainTask_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ChainTask
    svc  #OSServiceId_ChainTask
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ChainTask_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_chain_task_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service Schedule
  */
.global Schedule
.type   Schedule, %function
Schedule:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  Schedule_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_Schedule
    svc  #OSServiceId_Schedule
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
Schedule_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_schedule_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service GetTaskID
  */
.global GetTaskID
.type   GetTaskID, %function
GetTaskID:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetTaskID_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetTaskID
    svc  #OSServiceId_GetTaskID
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetTaskID_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_task_id_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service GetTaskState
  */
.global GetTaskState
.type   GetTaskState, %function
GetTaskState:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetTaskState_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetTaskState
    svc  #OSServiceId_GetTaskState
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetTaskState_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_task_state_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service CallTerminateTask
  */
.global CallTerminateTask
.type   CallTerminateTask, %function
CallTerminateTask:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  CallTerminateTask_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_CallTerminateTask
    svc  #OSServiceId_CallTerminateTask
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
CallTerminateTask_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    cpsid i   /* set PRIMASK */
    push {lr}
    bl   tpl_call_terminate_task_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    cpsie i   /* clear PRIMASK */
    pop  {pc}

 /*============================================================================
  * Service GetResource
  */
.global GetResource
.type   GetResource, %function
GetResource:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetResource_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetResource
    svc  #OSServiceId_GetResource
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetResource_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_resource_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service ReleaseResource
  */
.global ReleaseResource
.type   ReleaseResource, %function
ReleaseResource:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ReleaseResource_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ReleaseResource
    svc  #OSServiceId_ReleaseResource
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ReleaseResource_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_release_resource_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service GetAlarmBase
  */
.global GetAlarmBase
.type   GetAlarmBase, %function
GetAlarmBase:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetAlarmBase_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetAlarmBase
    svc  #OSServiceId_GetAlarmBase
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetAlarmBase_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_alarm_base_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service GetAlarm
  */
.global GetAlarm
.type   GetAlarm, %function
GetAlarm:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetAlarm_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetAlarm
    svc  #OSServiceId_GetAlarm
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetAlarm_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_alarm_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service SetRelAlarm
  */
.global SetRelAlarm
.type   SetRelAlarm, %function
SetRelAlarm:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  SetRelAlarm_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_SetRelAlarm
    svc  #OSServiceId_SetRelAlarm
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
SetRelAlarm_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_set_rel_alarm_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service SetAbsAlarm
  */
.global SetAbsAlarm
.type   SetAbsAlarm, %function
SetAbsAlarm:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  SetAbsAlarm_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_SetAbsAlarm
    svc  #OSServiceId_SetAbsAlarm
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
SetAbsAlarm_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_set_abs_alarm_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service CancelAlarm
  */
.global CancelAlarm
.type   CancelAlarm, %function
CancelAlarm:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  CancelAlarm_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_CancelAlarm
    svc  #OSServiceId_CancelAlarm
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
CancelAlarm_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_cancel_alarm_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

/*============================================================================
  * Service SetEvent
  */
.global SetEvent
.type   SetEvent, %function
SetEvent:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  SetEvent_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_SetEvent
    svc  #OSServiceId_SetEvent
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
SetEvent_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_set_event_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service WaitEvent
  */
.global WaitEvent
.type   WaitEvent, %function
WaitEvent:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  WaitEvent_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_WaitEvent
    svc  #OSServiceId_WaitEvent
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
WaitEvent_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_wait_event_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service ClearEvent
  */
.global ClearEvent
.type   ClearEvent, %function
ClearEvent:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  ClearEvent_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_ClearEvent
    svc  #OSServiceId_ClearEvent
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
ClearEvent_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_clear_event_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

 /*============================================================================
  * Service GetEvent
  */
.global GetEvent
.type   GetEvent, %function
GetEvent:
    /*-------------------------------------------------------------------------
     * Check the ISR_NUMBER field of the PSR
     * If 0 we are in thread mode and the system call is done by a svc
     * If not 0 we are in handler mode and the system call is done by
     * a function call
     */
    mrs  r3,IPSR
    cmp  r3,#0
    bne  GetEvent_direct_call
    /*-------------------------------------------------------------------------
     * We are in thread mode so we set r3 to the identifier of the service
     * and we do a svc
     */
    movs r3,#OSServiceId_GetEvent
    svc  #OSServiceId_GetEvent
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    bx   lr
GetEvent_direct_call:
    /*-------------------------------------------------------------------------
     * We are in handler mode so we do a simple function call
     */
    push {lr}
    bl   tpl_get_event_service
    /*-------------------------------------------------------------------------
     * return from the service wrapper
     */
    pop  {pc}

#define API_STOP_SEC_CODE
#include "tpl_as_memmap.h"


/* End of file tpl_invoque.S */

